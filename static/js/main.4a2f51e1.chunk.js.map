{"version":3,"sources":["Components/Header/index.tsx","Context/AppContext.tsx","Components/PokemonForm/index.tsx","Components/PokemonCatcher/index.tsx","Utils/Api.tsx","Pages/Detail/index.tsx","Components/Pokemon/index.tsx","Pages/Main/index.tsx","Components/SavedPokemon/index.tsx","Pages/MyPokemon/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Header","useState","isOpen","setIsOpen","close","Navbar","color","light","expand","fixed","NavbarBrand","tag","Link","to","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavItem","NavLink","initialValue","pokemons","count","next","previous","results","myPokemons","JSON","parse","localStorage","getItem","reducer","state","type","payload","setItem","stringify","filter","item","index","Error","AppContext","React","createContext","undefined","AppContextProvider","children","dispatcher","useReducer","Provider","value","PokemonForm","onClose","pokemon","name","setName","push","useHistory","useContext","dispatch","Form","onSubmit","e","preventDefault","nickname","image","sprites","front_default","FormGroup","Label","Input","onChange","target","required","placeholder","Button","block","PokemonCatcher","modalOpen","setModalOpen","isLoading","setIsLoading","isGot","setIsGot","modalToggle","catchPokemon","a","Promise","resolve","setTimeout","gotcha","Math","random","size","Modal","toggle","centered","ModalHeader","ModalBody","Spinner","src","alt","Api","Axios","create","baseURL","Detail","params","useRouteMatch","data","setData","fetchDetail","useCallback","get","id","useEffect","types","map","Badge","key","Row","moves","Col","xs","Card","CardBody","move","Pokemon","caught","useMemo","length","Main","fetchPokemon","disabled","SavedPokemon","confirmModalOpen","setConfirmModalOpen","toggleModal","ModalFooter","MyPokemon","App","Container","path","exact","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.4a2f51e1.chunk.js","sourcesContent":["import React, { Fragment, useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport {\n  Collapse,\n  Nav,\n  Navbar,\n  NavbarBrand,\n  NavbarToggler,\n  NavItem,\n  NavLink,\n} from 'reactstrap'\n\ninterface Props {}\n\nconst Header: React.FC<Props> = () => {\n  const [isOpen, setIsOpen] = useState(false)\n\n  const toggle = () => setIsOpen(!isOpen)\n  const close = () => setIsOpen(false)\n\n  return (\n    <Fragment>\n      <Navbar color='light' light expand='md' fixed='top'>\n        <NavbarBrand tag={Link} to='/'>\n          P0keD3x\n        </NavbarBrand>\n        <NavbarToggler onClick={toggle} />\n        <Collapse isOpen={isOpen} navbar>\n          <Nav className='mr-auto' navbar>\n            <NavItem onClick={close}>\n              <NavLink tag={Link} to='/'>\n                Pokemon Lists\n              </NavLink>\n            </NavItem>\n            <NavItem onClick={close}>\n              <NavLink tag={Link} to='/my-pokemons'>\n                My Pokemon\n              </NavLink>\n            </NavItem>\n          </Nav>\n        </Collapse>\n      </Navbar>\n      <div className='mt-5 pt-3'></div>\n    </Fragment>\n  )\n}\n\nexport default Header\n","import React from 'react'\n\nexport const SET_POKEMONS = 'SET_POKEMONS'\nexport const APPEND_POKEMONS = 'APPEND_POKEMON'\n\nexport const SAVE_MY_POKEMON = 'SAVE_MY_POKEMON'\nexport const REMOVE_MY_POKEMON = 'REMOVE_MY_POKEMON'\n\ninterface PokemonItem {\n  name: string\n  url: string\n}\n\ninterface ContextProps {\n  pokemons: {\n    count: Number\n    next: string | null\n    previous: string | null\n    results: PokemonItem[]\n  }\n  myPokemons: {\n    name: string\n    nickname: string\n    image: string\n  }[]\n}\n\nconst initialValue: ContextProps = {\n  pokemons: {\n    count: 0,\n    next: null,\n    previous: null,\n    results: [],\n  },\n  myPokemons: JSON.parse(localStorage.getItem('_myPokemons') || '[]'),\n}\n\ninterface ReducerAction {\n  type: string\n  payload: any\n}\n\ntype InitialContext = [ContextProps, React.Dispatch<ReducerAction>]\n\nconst reducer = (\n  state: ContextProps,\n  { type, payload }: ReducerAction\n): ContextProps => {\n  let myPokemons\n  switch (type) {\n    case SET_POKEMONS:\n      return { ...state, pokemons: payload }\n    case APPEND_POKEMONS:\n      return {\n        ...state,\n        pokemons: {\n          ...state.pokemons,\n          ...payload,\n          results: [...state.pokemons.results, ...payload.results],\n        },\n      }\n    case SAVE_MY_POKEMON:\n      myPokemons = [...state.myPokemons, payload]\n      localStorage.setItem('_myPokemons', JSON.stringify(myPokemons))\n      return {\n        ...state,\n        myPokemons,\n      }\n    case REMOVE_MY_POKEMON:\n      myPokemons = state.myPokemons.filter((item, index) => index !== payload)\n      localStorage.setItem('_myPokemons', JSON.stringify(myPokemons))\n      return {\n        ...state,\n        myPokemons,\n      }\n    default:\n      throw new Error()\n  }\n}\n\nconst AppContext = React.createContext<InitialContext | undefined>(undefined)\n\ninterface Props {\n  children: React.ReactElement\n}\n\nexport const AppContextProvider: React.FC<Props> = ({ children }) => {\n  const dispatcher = React.useReducer(reducer, initialValue)\n  return (\n    <AppContext.Provider value={dispatcher}>{children}</AppContext.Provider>\n  )\n}\n\nexport default AppContext\n","import AppContext, { SAVE_MY_POKEMON } from 'Context/AppContext'\nimport { PokemonDetail } from 'Pages/Detail'\nimport React, { useContext, useState } from 'react'\nimport { useHistory } from 'react-router-dom'\nimport { Button, Form, FormGroup, Input, Label } from 'reactstrap'\n\ninterface Props {\n  onClose: Function\n  pokemon: PokemonDetail\n}\n\nconst PokemonForm: React.FC<Props> = ({ onClose, pokemon }) => {\n  const [name, setName] = useState('')\n  const { push } = useHistory()\n  const [, dispatch] = useContext(AppContext)\n\n  const onChangeValue = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setName(e.target.value)\n  }\n\n  const onSubmit = (e: React.ChangeEvent<HTMLFormElement>) => {\n    e.preventDefault()\n    onClose()\n    dispatch({\n      type: SAVE_MY_POKEMON,\n      payload: {\n        name: pokemon.name,\n        nickname: name,\n        image: pokemon.sprites.front_default,\n      },\n    })\n    push('/my-pokemons')\n  }\n\n  return (\n    <Form onSubmit={onSubmit}>\n      <FormGroup>\n        <Label>Give your pokemon name !</Label>\n        <Input\n          type='text'\n          name='name'\n          onChange={onChangeValue}\n          required\n          placeholder='Chewbecca'\n        />\n      </FormGroup>\n      <FormGroup>\n        <Button color='primary' block>\n          Save\n        </Button>\n      </FormGroup>\n    </Form>\n  )\n}\n\nexport default PokemonForm\n","import PokemonForm from 'Components/PokemonForm'\nimport { PokemonDetail } from 'Pages/Detail'\nimport React, { useState } from 'react'\nimport { Button, Modal, ModalBody, ModalHeader, Spinner } from 'reactstrap'\nimport './index.scss'\ninterface Props {\n  pokemon: PokemonDetail\n}\n\nconst PokemonCatcher: React.FC<Props> = ({ pokemon }) => {\n  const [modalOpen, setModalOpen] = useState(false)\n  const [isLoading, setIsLoading] = useState(true)\n  const [isGot, setIsGot] = useState(true)\n\n  const modalToggle = () => setModalOpen(!modalOpen)\n\n  const catchPokemon = async () => {\n    setIsLoading(true)\n    setModalOpen(true)\n\n    //Make Fake Loading\n    await new Promise(resolve => setTimeout(resolve, 1000))\n    const gotcha = Math.random() > 0.5\n    setIsGot(gotcha)\n\n    setIsLoading(false)\n  }\n\n  const GotPokemon = () => {\n    return (\n      <div className='text-center'>\n        <h2>Congratulations !</h2>\n        <figure className='m-2'>\n          <img src={pokemon.sprites.front_default} alt={pokemon.name} />\n        </figure>\n        <p>\n          You Got Pokemon <strong>{pokemon.name}</strong>\n        </p>\n        <PokemonForm pokemon={pokemon} onClose={modalToggle} />\n      </div>\n    )\n  }\n\n  const Unlucky = () => {\n    return (\n      <div className='text-center'>\n        <h2>Oh no!</h2>\n        <p>This is not your lucky time!</p>\n        <p>Maybe you want to try again ?</p>\n        <Button block color='primary' onClick={catchPokemon}>\n          Yes i do !\n        </Button>\n      </div>\n    )\n  }\n\n  return (\n    <div className='PokemonCatcher px-3 pb-3'>\n      <Button color='danger' block size='lg' onClick={catchPokemon}>\n        Catch Pokemon !\n      </Button>\n      <Modal isOpen={modalOpen} toggle={modalToggle} centered>\n        <ModalHeader toggle={modalToggle}>Catch my Pokemon!</ModalHeader>\n        <ModalBody>\n          {isLoading ? (\n            <div className='text-center m-5'>\n              <Spinner size='lg' />\n            </div>\n          ) : isGot ? (\n            <GotPokemon />\n          ) : (\n            <Unlucky />\n          )}\n        </ModalBody>\n      </Modal>\n    </div>\n  )\n}\n\nexport default PokemonCatcher\n","import Axios from 'axios'\n\nconst Api = () => {\n  return Axios.create({\n    baseURL: 'https://pokeapi.co/api/v2/',\n  })\n}\n\nexport default Api\n","import PokemonCatcher from 'Components/PokemonCatcher'\nimport React, { Fragment, useCallback, useEffect, useState } from 'react'\nimport { useRouteMatch } from 'react-router-dom'\nimport { Badge, Card, CardBody, Col, Row, Spinner } from 'reactstrap'\nimport Api from 'Utils/Api'\nimport './index.scss'\ninterface Props {}\n\nexport interface PokemonDetail {\n  name: string\n  moves: {\n    move: { name: string }\n  }[]\n  types: {\n    type: {\n      name: string\n    }\n  }[]\n  sprites: {\n    front_default: string\n  }\n}\n\nconst Detail: React.FC<Props> = () => {\n  const { params } = useRouteMatch()\n  const [data, setData] = useState<PokemonDetail | null>(null)\n  const [isLoading, setIsLoading] = useState(true)\n\n  const fetchDetail = useCallback(async () => {\n    setIsLoading(true)\n    try {\n      const { data } = await Api().get(`/pokemon/${params.id}`)\n      setData(data)\n    } catch (e) {\n      //...\n    }\n    setIsLoading(false)\n  }, [params.id])\n\n  useEffect(() => {\n    fetchDetail()\n  }, [fetchDetail])\n\n  return (\n    <div className='Detail my-3'>\n      {isLoading ? (\n        <div className='Detail_loading text-center mt-5'>\n          <Spinner />\n          <p>Loading...</p>\n        </div>\n      ) : data !== null ? (\n        <Fragment>\n          <div className='text-center'>\n            <img\n              src={data.sprites.front_default}\n              className='Detail_sprites'\n              alt={data.name}\n            />\n            <h1 className='Detail_name'>{params.id}</h1>\n            <div className='Detail_types mb-3'>\n              {data.types.map((item, index) => (\n                <Badge key={index} color='primary' className='mr-2'>\n                  {item.type.name}\n                </Badge>\n              ))}\n            </div>\n          </div>\n          <h2>Moves</h2>\n          <div className='Detail_moves'>\n            <Row className='mx-n1'>\n              {data.moves.map((item, index) => (\n                <Col xs={6} key={index} className='p-1'>\n                  <Card>\n                    <CardBody className='p-2'>{item.move.name}</CardBody>\n                  </Card>\n                </Col>\n              ))}\n            </Row>\n          </div>\n          <PokemonCatcher pokemon={data} />\n          <div className='mb-5'>&nbsp;</div>\n        </Fragment>\n      ) : (\n        <div>\n          <h1>No Pokemon founds</h1>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Detail\n","import AppContext from 'Context/AppContext'\nimport React, { useContext, useMemo } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Badge, Card, CardBody } from 'reactstrap'\nimport './index.scss'\ninterface Props {\n  name: String\n  index: number\n}\n\nconst Pokemon: React.FC<Props> = ({ name, index }) => {\n  const [state] = useContext(AppContext)\n\n  const caught = useMemo(() => {\n    return state.myPokemons.filter(item => item.name === name).length\n  }, [state.myPokemons, name])\n\n  return (\n    <Link to={'/pokemon/' + name} className='Pokemon'>\n      <Card className='my-3'>\n        <CardBody className='p-2'>\n          <span className='Pokemon_index'>#{index + 1}</span>\n          <span className='Pokemon_name'>{name}</span>\n          {caught > 0 && (\n            <span className='Pokemon_caught float-right'>\n              <Badge color='primary'>{caught}</Badge>\n            </span>\n          )}\n        </CardBody>\n      </Card>\n    </Link>\n  )\n}\n\nexport default Pokemon\n","import Pokemon from 'Components/Pokemon'\nimport AppContext, { APPEND_POKEMONS, SET_POKEMONS } from 'Context/AppContext'\nimport React, { useCallback, useContext, useEffect, useState } from 'react'\nimport { Button, Spinner } from 'reactstrap'\nimport Api from 'Utils/Api'\n\ninterface Props {}\n\nconst Main: React.FC<Props> = () => {\n  const [state, dispatch] = useContext(AppContext)\n  const [isLoading, setIsLoading] = useState(false)\n\n  const fetchPokemon = useCallback(\n    async (next = null) => {\n      setIsLoading(true)\n      const { data } = await Api().get(next || '/pokemon')\n      if (next !== null) {\n        dispatch({ type: APPEND_POKEMONS, payload: data })\n      } else {\n        dispatch({ type: SET_POKEMONS, payload: data })\n      }\n      setIsLoading(false)\n    },\n    [dispatch]\n  )\n\n  useEffect(() => {\n    if (state.pokemons.results.length === 0) {\n      fetchPokemon()\n    }\n  }, [fetchPokemon, state.pokemons.results.length])\n\n  const fetchNext = () => {\n    fetchPokemon(state.pokemons.next)\n  }\n\n  return (\n    <div className='MainPage'>\n      {isLoading && state.pokemons.results.length === 0 ? (\n        <div className='m-5 text-center'>\n          <Spinner size='lg' />\n        </div>\n      ) : (\n        state.pokemons.results.map((item, index) => (\n          <Pokemon {...item} index={index} key={index} />\n        ))\n      )}\n\n      {state.pokemons.next !== null && (\n        <div className='my-3'>\n          <Button\n            block\n            color='primary'\n            onClick={fetchNext}\n            disabled={isLoading}\n          >\n            {isLoading && <Spinner size='sm' className='mr-2' />}\n            Load More !\n          </Button>\n        </div>\n      )}\n    </div>\n  )\n}\n\nexport default Main\n","import AppContext, { REMOVE_MY_POKEMON } from 'Context/AppContext'\nimport React, { useContext, useState } from 'react'\nimport {\n  Button,\n  Card,\n  CardBody,\n  Col,\n  Modal,\n  ModalBody,\n  ModalFooter,\n  ModalHeader,\n} from 'reactstrap'\nimport './index.scss'\ninterface Props {\n  name: string\n  nickname: string\n  image: string\n  index: number\n}\n\nconst SavedPokemon: React.FC<Props> = ({ name, nickname, image, index }) => {\n  const [confirmModalOpen, setConfirmModalOpen] = useState(false)\n  const [, dispatch] = useContext(AppContext)\n\n  const toggleModal = () => setConfirmModalOpen(!confirmModalOpen)\n\n  const deleteItem = () => {\n    toggleModal()\n    dispatch({ type: REMOVE_MY_POKEMON, payload: index })\n  }\n\n  return (\n    <Col xs={6} className='p-2'>\n      <Card>\n        <CardBody className='p-2 text-center'>\n          <figure className='Pokemon_image'>\n            <img src={image} alt={nickname} />\n          </figure>\n          <p className='Pokemon_name mb-0 font-weight-bold'>{name}</p>\n          <p className='Pokemon_nickname'>({nickname})</p>\n          <Button color='danger' block size='sm' onClick={toggleModal}>\n            Remove\n          </Button>\n        </CardBody>\n      </Card>\n      <Modal isOpen={confirmModalOpen} toggle={toggleModal} centered size='sm'>\n        <ModalHeader toggle={toggleModal}>Confirm delete</ModalHeader>\n        <ModalBody>Confirm delete this from your collection ?</ModalBody>\n        <ModalFooter>\n          <Button onClick={toggleModal}>No</Button>\n          <Button onClick={deleteItem} color='primary'>\n            Yes\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </Col>\n  )\n}\n\nexport default SavedPokemon\n","import SavedPokemon from 'Components/SavedPokemon'\nimport AppContext from 'Context/AppContext'\nimport React, { useContext } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Row } from 'reactstrap'\n\ninterface Props {}\n\nconst MyPokemon: React.FC<Props> = () => {\n  const [state] = useContext(AppContext)\n  return (\n    <div className='MyPokemon'>\n      <h2>My Pokemon's</h2>\n      {state.myPokemons.length === 0 ? (\n        <div className='text-center m-5'>\n          <h2>No Pokemon has been caught</h2>\n          <p>\n            Try to <Link to='/'>catch pokemon !</Link>\n          </p>\n        </div>\n      ) : (\n        <Row className='mx-n2'>\n          {state.myPokemons.map((item, index) => (\n            <SavedPokemon {...item} index={index} key={index} />\n          ))}\n        </Row>\n      )}\n    </div>\n  )\n}\n\nexport default MyPokemon\n","import Header from 'Components/Header'\nimport { AppContextProvider } from 'Context/AppContext'\nimport Detail from 'Pages/Detail'\nimport Main from 'Pages/Main'\nimport MyPokemon from 'Pages/MyPokemon'\nimport React from 'react'\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\nimport { Container } from 'reactstrap'\n\nconst App = () => {\n  return (\n    <AppContextProvider>\n      <Router>\n        <Container>\n          <Header />\n          <Switch>\n            <Route path='/' exact>\n              <Main />\n            </Route>\n            <Route path='/pokemon/:id' exact>\n              <Detail />\n            </Route>\n            <Route path='/my-pokemons' exact>\n              <MyPokemon />\n            </Route>\n            <Route path='*'>\n              <div className='text-center mt-5'>\n                <h2>Page Not Found !</h2>\n                <p>\n                  Let's go back to <Link to='/'>home</Link>\n                </p>\n              </div>\n            </Route>\n          </Switch>\n        </Container>\n      </Router>\n    </AppContextProvider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.scss'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}